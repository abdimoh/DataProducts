q()
?<<
?>>
?<<-
?<<-
q()
testdata<-data.frame(x=1:100, y =rnorm(100))
plot(testdata$x, tesdata$y)
plot(testdata$x, testdata$y)
?plot
plot(testdata$x, testdata$y, type="l")
load("~/Cleandata/tmp.RData")
install.packages(c("xlsx;", "rJava"))
natgas<-read.xlsx("naturalgas.xlsx")
install.packages('rJava', .libPaths()[1], 'http://www.rforge.net/')
natgas<-read.xlsx("naturalgas.xlsx")
natgas<-read.xlsx("naturalgas.xlsx")
library(xlsx)
library(rjava)
library(rJava)
install.packages('rJava', .libPaths()[1], 'http://www.rforge.net/')
library(xlsx)
if (Sys.getenv("JAVA_HOME")!="") Sys.setenv(JAVA_HOME="") library(rJava)
if (Sys.getenv("JAVA_HOME")!="") {Sys.setenv(JAVA_HOME="") library(rJava) }
if (Sys.getenv("JAVA_HOME")!="") {Sys.setenv(JAVA_HOME="") }
library(rJava)
library(xlsx)
source('~/exdata_data_household_power_consumption/plot3.R')
plot3()
source('~/exdata_data_household_power_consumption/plot3.R')
plot3()
source('~/exdata_data_household_power_consumption/plot3.R')
plot3()
source('~/exdata_data_household_power_consumption/plot3.R')
source('~/exdata_data_household_power_consumption/plot3.R')
plot3()
source('~/exdata_data_household_power_consumption/plot3.R')
plot3()
source('~/exdata_data_household_power_consumption/plot3.R')
plot3()
source('~/exdata_data_household_power_consumption/plot3.R')
plot3()
source('~/exdata_data_household_power_consumption/plot3.R')
plot3()
?close()
source('~/exdata_data_household_power_consumption/plot3.R')
plot3()
R.version.string
install.packages("swirl")
library(swirl)
ls()
rm(list=ls())
ls()
install_frpm_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf<-read.csv("path2csv", stringsAsFactors = FALSE)
?read.csv()
mydf<-read.csv("path2.csv", stringsAsFactors = FALSE)
getwd()
mydf<-read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
libraryI(dplyr)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?manip
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
(cran, package == "swirl")
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.1.1", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2<-select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
)
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3<-select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size-mb/2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb/2^10)
mutate(cran3, correct_size=size+1000)
summarize(cran, avg_bytes=mean(size))
library(dplyr)
cran<-tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by
by_package<-group_by(cran, package)
by_package
summarize(by_package, avg_byte=mean(size))
summarize(by_package, mean(size))
?n
?n_distinct
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts<-filter(pack_sum, count>679)
top_counts
head(top_counts, 20)
arrange(pack_sum, desc(count))
arrange(top_counts, desc(count))
quantile(pack_sum$unique, probs = 0.99)
top_unique<-filter(pack_sum, unique>465)
top_unique
arrang(top_unique, desc(unique))
arrange(top_unique, desc(unique))
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
head(segmentationOriginal)
training<-segmentationOriginal[,segmentationOriginal$Case="Train"]
training<-segmentationOriginal[,segmentationOriginal$Case=="Train"]
training<-segmentationOriginal[segmentationOriginal$Case=="Train",]
head(training)
testing<-segmentationOriginal[segmentationOriginal$Case=="Test",]
modFit5<-train(Class ~ ., data=training, method="rpart")
modFit5$finalModel
set.seed(125)
modFit5<-train(Class ~ ., data=training, method="rpart")
modFit5$finalModel
predict(modFit5, newdata=testing)
modFit5$finalModel
print(modFit5$finalModel)
plot(modFit5$finalModel)
text(modFit5$finalModel)
library(pgmm)
data(olive)
install.packages("pgmm")
library(pgmm)
data(olive)
head(olive)
tail(olive)
olive = olive[,-1]
modFit6<-train(Area ~ ., data=training, method="rpart"))
dim(olive)
modFit6<-train(Area ~ ., data=olive, method="rpart")
t(colMeans(olive))
predict(modFit6, newdata=as.data.frame(t(colMeans(olive))))
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
LogMod <- train(chd ~ alcohol + obesity + age +
tobacco + typea + ldl,
method="glm",family="binomial",
data=trainSA)
predTest<-predict(logMod, newdata=testSA)
predTest<-predict(LogMod, newdata=testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA$chd,predTest)
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
library(shiny)
install.packages('shiny')
library(shiny)
shinyapps::setAccountInfo(name='abdimoh', token='8D4D62454040DBF2DDA3B3B0412A0DA6', secret='csN/XQSWiYtItADWdcIhrPm3DwkLCfXTOvRdS1rH')
setwd("~/DevelopingDataProducts")
runApp()
library(shinyapps)
shinyapps::deployApp()
demo(googleVis)
install.packages('googleVis')
demo(googleVis)
library(googleVis)
demo(googleVis)
